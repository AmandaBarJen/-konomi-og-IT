{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AmandaBarJen/Machine-Learning_2025/blob/main/Linear%20Regression_ABJ\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Ensure that we use Python 3.7 or above:"
      ],
      "metadata": {
        "id": "cifewyhF9BAO"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "8KOQTcKX8bg2"
      },
      "outputs": [],
      "source": [
        "import sys\n",
        "\n",
        "assert sys.version_info >= (3, 7)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Ensure that we use at least Scikit-Learn 1.0.1"
      ],
      "metadata": {
        "id": "MdUYfAR79gu8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from packaging import version\n",
        "import sklearn\n",
        "\n",
        "assert version.parse(sklearn.__version__) >= version.parse(\"1.0.1\")"
      ],
      "metadata": {
        "id": "cEyMjLcU86Dw"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Let us set up the fonts in mathplotlib"
      ],
      "metadata": {
        "id": "y2xAwFNX-Q0D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.rc('font', size=12)\n",
        "plt.rc('axes', labelsize=14, titlesize=14)\n",
        "plt.rc('legend', fontsize=12)\n",
        "plt.rc('xtick', labelsize=10)\n",
        "plt.rc('ytick', labelsize=10)"
      ],
      "metadata": {
        "id": "gwi4DUJV-K1b"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Import important libraries 'numpy' and 'pandas'"
      ],
      "metadata": {
        "id": "tvKLkp_dHHwf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd"
      ],
      "metadata": {
        "id": "gK4Onnhy-6o8"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Make reference to life satifaction data file"
      ],
      "metadata": {
        "id": "zZoc-LzQHYcB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "datafile = \"https://github.com/ageron/data/raw/main/lifesat/lifesat.csv\"\n",
        "\n",
        "##Try with this one later\n",
        "##datafile = \"https://raw.githubusercontent.com/jpandersen61/Machine-Learning/main/InjuredandkilledintrafikDK.csv\""
      ],
      "metadata": {
        "id": "1EB-X59l_zgg"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Excercise(s):"
      ],
      "metadata": {
        "id": "GLUiNLM-HqXJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Try viewing this file in your internet browser"
      ],
      "metadata": {
        "id": "Xd2829tIAimY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Load the data file"
      ],
      "metadata": {
        "id": "yWx2mhWjIMq4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lifesat = pd.read_csv(datafile)\n",
        "print(lifesat)\n",
        "\n"
      ],
      "metadata": {
        "id": "9g1ETm1Y_Q2c",
        "outputId": "11bf90c2-10fb-4748-aadb-289c58b79c97",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "           Country  GDP per capita (USD)  Life satisfaction\n",
            "0           Russia          26456.387938                5.8\n",
            "1           Greece          27287.083401                5.4\n",
            "2           Turkey          28384.987785                5.5\n",
            "3           Latvia          29932.493910                5.9\n",
            "4          Hungary          31007.768407                5.6\n",
            "5         Portugal          32181.154537                5.4\n",
            "6           Poland          32238.157259                6.1\n",
            "7          Estonia          35638.421351                5.7\n",
            "8            Spain          36215.447591                6.3\n",
            "9         Slovenia          36547.738956                5.9\n",
            "10       Lithuania          36732.034744                5.9\n",
            "11          Israel          38341.307570                7.2\n",
            "12           Italy          38992.148381                6.0\n",
            "13  United Kingdom          41627.129269                6.8\n",
            "14          France          42025.617373                6.5\n",
            "15     New Zealand          42404.393738                7.3\n",
            "16          Canada          45856.625626                7.4\n",
            "17         Finland          47260.800458                7.6\n",
            "18         Belgium          48210.033111                6.9\n",
            "19       Australia          48697.837028                7.3\n",
            "20          Sweden          50683.323510                7.3\n",
            "21         Germany          50922.358023                7.0\n",
            "22         Austria          51935.603862                7.1\n",
            "23         Iceland          52279.728851                7.5\n",
            "24     Netherlands          54209.563836                7.4\n",
            "25         Denmark          55938.212809                7.6\n",
            "26   United States          60235.728492                6.9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Excercise(s)"
      ],
      "metadata": {
        "id": "JBJfOo9HFmhK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Make a new code cell below and evaluate 'lifesat'"
      ],
      "metadata": {
        "id": "IuZ12x0WF6QK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lifesat\n"
      ],
      "metadata": {
        "id": "jN4wQcW2dtnN",
        "outputId": "992c5378-72ff-4f28-b988-149494d1db05",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 896
        }
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Country  GDP per capita (USD)  Life satisfaction\n",
              "0           Russia          26456.387938                5.8\n",
              "1           Greece          27287.083401                5.4\n",
              "2           Turkey          28384.987785                5.5\n",
              "3           Latvia          29932.493910                5.9\n",
              "4          Hungary          31007.768407                5.6\n",
              "5         Portugal          32181.154537                5.4\n",
              "6           Poland          32238.157259                6.1\n",
              "7          Estonia          35638.421351                5.7\n",
              "8            Spain          36215.447591                6.3\n",
              "9         Slovenia          36547.738956                5.9\n",
              "10       Lithuania          36732.034744                5.9\n",
              "11          Israel          38341.307570                7.2\n",
              "12           Italy          38992.148381                6.0\n",
              "13  United Kingdom          41627.129269                6.8\n",
              "14          France          42025.617373                6.5\n",
              "15     New Zealand          42404.393738                7.3\n",
              "16          Canada          45856.625626                7.4\n",
              "17         Finland          47260.800458                7.6\n",
              "18         Belgium          48210.033111                6.9\n",
              "19       Australia          48697.837028                7.3\n",
              "20          Sweden          50683.323510                7.3\n",
              "21         Germany          50922.358023                7.0\n",
              "22         Austria          51935.603862                7.1\n",
              "23         Iceland          52279.728851                7.5\n",
              "24     Netherlands          54209.563836                7.4\n",
              "25         Denmark          55938.212809                7.6\n",
              "26   United States          60235.728492                6.9"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-28335341-f1a0-462d-9421-60ec54dfa64f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>GDP per capita (USD)</th>\n",
              "      <th>Life satisfaction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Russia</td>\n",
              "      <td>26456.387938</td>\n",
              "      <td>5.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Greece</td>\n",
              "      <td>27287.083401</td>\n",
              "      <td>5.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Turkey</td>\n",
              "      <td>28384.987785</td>\n",
              "      <td>5.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Latvia</td>\n",
              "      <td>29932.493910</td>\n",
              "      <td>5.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Hungary</td>\n",
              "      <td>31007.768407</td>\n",
              "      <td>5.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Portugal</td>\n",
              "      <td>32181.154537</td>\n",
              "      <td>5.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Poland</td>\n",
              "      <td>32238.157259</td>\n",
              "      <td>6.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Estonia</td>\n",
              "      <td>35638.421351</td>\n",
              "      <td>5.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Spain</td>\n",
              "      <td>36215.447591</td>\n",
              "      <td>6.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Slovenia</td>\n",
              "      <td>36547.738956</td>\n",
              "      <td>5.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Lithuania</td>\n",
              "      <td>36732.034744</td>\n",
              "      <td>5.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Israel</td>\n",
              "      <td>38341.307570</td>\n",
              "      <td>7.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Italy</td>\n",
              "      <td>38992.148381</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>United Kingdom</td>\n",
              "      <td>41627.129269</td>\n",
              "      <td>6.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>France</td>\n",
              "      <td>42025.617373</td>\n",
              "      <td>6.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>New Zealand</td>\n",
              "      <td>42404.393738</td>\n",
              "      <td>7.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Canada</td>\n",
              "      <td>45856.625626</td>\n",
              "      <td>7.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Finland</td>\n",
              "      <td>47260.800458</td>\n",
              "      <td>7.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Belgium</td>\n",
              "      <td>48210.033111</td>\n",
              "      <td>6.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Australia</td>\n",
              "      <td>48697.837028</td>\n",
              "      <td>7.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Sweden</td>\n",
              "      <td>50683.323510</td>\n",
              "      <td>7.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Germany</td>\n",
              "      <td>50922.358023</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Austria</td>\n",
              "      <td>51935.603862</td>\n",
              "      <td>7.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Iceland</td>\n",
              "      <td>52279.728851</td>\n",
              "      <td>7.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Netherlands</td>\n",
              "      <td>54209.563836</td>\n",
              "      <td>7.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Denmark</td>\n",
              "      <td>55938.212809</td>\n",
              "      <td>7.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>United States</td>\n",
              "      <td>60235.728492</td>\n",
              "      <td>6.9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-28335341-f1a0-462d-9421-60ec54dfa64f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-28335341-f1a0-462d-9421-60ec54dfa64f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-28335341-f1a0-462d-9421-60ec54dfa64f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f13eb1d4-800c-4aac-8f76-80e70f77150e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f13eb1d4-800c-4aac-8f76-80e70f77150e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f13eb1d4-800c-4aac-8f76-80e70f77150e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_42762319-1f45-4970-9230-f134ae8d6749\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('lifesat')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_42762319-1f45-4970-9230-f134ae8d6749 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('lifesat');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "lifesat",
              "summary": "{\n  \"name\": \"lifesat\",\n  \"rows\": 27,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 27,\n        \"samples\": [\n          \"Spain\",\n          \"United Kingdom\",\n          \"Slovenia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GDP per capita (USD)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9631.452318546564,\n        \"min\": 26456.3879381321,\n        \"max\": 60235.7284916969,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          36215.4475907307,\n          41627.129269425,\n          36547.7389559849\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Life satisfaction\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7656068482934607,\n        \"min\": 5.4,\n        \"max\": 7.6,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          5.8,\n          6.1,\n          6.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Get some information about the kind of data structure, that life satisfaction data is store in. Usefuk to know when using the data afterwards in Python: Make a new code cell below and evaluate 'type(lifesat)'"
      ],
      "metadata": {
        "id": "aDwhNpA3Cyp0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "type(lifesat)\n"
      ],
      "metadata": {
        "id": "Rw3q2uCRegkH",
        "outputId": "1fc8319e-f4e0-4e57-f524-552da7fcf9b7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>pandas.core.frame.DataFrame</b><br/>def __init__(data=None, index: Axes | None=None, columns: Axes | None=None, dtype: Dtype | None=None, copy: bool | None=None) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py</a>Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n",
              "\n",
              "Data structure also contains labeled axes (rows and columns).\n",
              "Arithmetic operations align on both row and column labels. Can be\n",
              "thought of as a dict-like container for Series objects. The primary\n",
              "pandas data structure.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "data : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n",
              "    Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n",
              "    data is a dict, column order follows insertion-order. If a dict contains Series\n",
              "    which have an index defined, it is aligned by its index. This alignment also\n",
              "    occurs if data is a Series or a DataFrame itself. Alignment is done on\n",
              "    Series/DataFrame inputs.\n",
              "\n",
              "    If data is a list of dicts, column order follows insertion-order.\n",
              "\n",
              "index : Index or array-like\n",
              "    Index to use for resulting frame. Will default to RangeIndex if\n",
              "    no indexing information part of input data and no index provided.\n",
              "columns : Index or array-like\n",
              "    Column labels to use for resulting frame when data does not have them,\n",
              "    defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n",
              "    will perform column selection instead.\n",
              "dtype : dtype, default None\n",
              "    Data type to force. Only a single dtype is allowed. If None, infer.\n",
              "copy : bool or None, default None\n",
              "    Copy data from inputs.\n",
              "    For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n",
              "    or 2d ndarray input, the default of None behaves like ``copy=False``.\n",
              "    If data is a dict containing one or more Series (possibly of different dtypes),\n",
              "    ``copy=False`` will ensure that these inputs are not copied.\n",
              "\n",
              "    .. versionchanged:: 1.3.0\n",
              "\n",
              "See Also\n",
              "--------\n",
              "DataFrame.from_records : Constructor from tuples, also record arrays.\n",
              "DataFrame.from_dict : From dicts of Series, arrays, or dicts.\n",
              "read_csv : Read a comma-separated values (csv) file into DataFrame.\n",
              "read_table : Read general delimited file into DataFrame.\n",
              "read_clipboard : Read text from clipboard into DataFrame.\n",
              "\n",
              "Notes\n",
              "-----\n",
              "Please reference the :ref:`User Guide &lt;basics.dataframe&gt;` for more information.\n",
              "\n",
              "Examples\n",
              "--------\n",
              "Constructing DataFrame from a dictionary.\n",
              "\n",
              "&gt;&gt;&gt; d = {&#x27;col1&#x27;: [1, 2], &#x27;col2&#x27;: [3, 4]}\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=d)\n",
              "&gt;&gt;&gt; df\n",
              "   col1  col2\n",
              "0     1     3\n",
              "1     2     4\n",
              "\n",
              "Notice that the inferred dtype is int64.\n",
              "\n",
              "&gt;&gt;&gt; df.dtypes\n",
              "col1    int64\n",
              "col2    int64\n",
              "dtype: object\n",
              "\n",
              "To enforce a single dtype:\n",
              "\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=d, dtype=np.int8)\n",
              "&gt;&gt;&gt; df.dtypes\n",
              "col1    int8\n",
              "col2    int8\n",
              "dtype: object\n",
              "\n",
              "Constructing DataFrame from a dictionary including Series:\n",
              "\n",
              "&gt;&gt;&gt; d = {&#x27;col1&#x27;: [0, 1, 2, 3], &#x27;col2&#x27;: pd.Series([2, 3], index=[2, 3])}\n",
              "&gt;&gt;&gt; pd.DataFrame(data=d, index=[0, 1, 2, 3])\n",
              "   col1  col2\n",
              "0     0   NaN\n",
              "1     1   NaN\n",
              "2     2   2.0\n",
              "3     3   3.0\n",
              "\n",
              "Constructing DataFrame from numpy ndarray:\n",
              "\n",
              "&gt;&gt;&gt; df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n",
              "...                    columns=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])\n",
              "&gt;&gt;&gt; df2\n",
              "   a  b  c\n",
              "0  1  2  3\n",
              "1  4  5  6\n",
              "2  7  8  9\n",
              "\n",
              "Constructing DataFrame from a numpy ndarray that has labeled columns:\n",
              "\n",
              "&gt;&gt;&gt; data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n",
              "...                 dtype=[(&quot;a&quot;, &quot;i4&quot;), (&quot;b&quot;, &quot;i4&quot;), (&quot;c&quot;, &quot;i4&quot;)])\n",
              "&gt;&gt;&gt; df3 = pd.DataFrame(data, columns=[&#x27;c&#x27;, &#x27;a&#x27;])\n",
              "...\n",
              "&gt;&gt;&gt; df3\n",
              "   c  a\n",
              "0  3  1\n",
              "1  6  4\n",
              "2  9  7\n",
              "\n",
              "Constructing DataFrame from dataclass:\n",
              "\n",
              "&gt;&gt;&gt; from dataclasses import make_dataclass\n",
              "&gt;&gt;&gt; Point = make_dataclass(&quot;Point&quot;, [(&quot;x&quot;, int), (&quot;y&quot;, int)])\n",
              "&gt;&gt;&gt; pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n",
              "   x  y\n",
              "0  0  0\n",
              "1  0  3\n",
              "2  2  3\n",
              "\n",
              "Constructing DataFrame from Series/DataFrame:\n",
              "\n",
              "&gt;&gt;&gt; ser = pd.Series([1, 2, 3], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df = pd.DataFrame(data=ser, index=[&quot;a&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df\n",
              "   0\n",
              "a  1\n",
              "c  3\n",
              "\n",
              "&gt;&gt;&gt; df1 = pd.DataFrame([1, 2, 3], index=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], columns=[&quot;x&quot;])\n",
              "&gt;&gt;&gt; df2 = pd.DataFrame(data=df1, index=[&quot;a&quot;, &quot;c&quot;])\n",
              "&gt;&gt;&gt; df2\n",
              "   x\n",
              "a  1\n",
              "c  3</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 509);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Extract the learning set 'X' and its labels 'y'"
      ],
      "metadata": {
        "id": "cj4YKu6oFI3Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = lifesat[[\"GDP per capita (USD)\"]].values\n",
        "y = lifesat[[\"Life satisfaction\"]].values\n",
        "\n"
      ],
      "metadata": {
        "id": "NtovVwne_pM7"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X)\n"
      ],
      "metadata": {
        "id": "SkI7o0QwfczQ",
        "outputId": "220764ff-7fc0-49c6-faf4-099d4c09c795",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[26456.38793813]\n",
            " [27287.08340093]\n",
            " [28384.98778463]\n",
            " [29932.49391006]\n",
            " [31007.76840654]\n",
            " [32181.15453723]\n",
            " [32238.15725928]\n",
            " [35638.42135118]\n",
            " [36215.44759073]\n",
            " [36547.73895598]\n",
            " [36732.03474403]\n",
            " [38341.30757041]\n",
            " [38992.14838075]\n",
            " [41627.12926943]\n",
            " [42025.61737306]\n",
            " [42404.39373816]\n",
            " [45856.62562648]\n",
            " [47260.80045844]\n",
            " [48210.03311134]\n",
            " [48697.83702825]\n",
            " [50683.32350972]\n",
            " [50922.35802345]\n",
            " [51935.60386182]\n",
            " [52279.72885136]\n",
            " [54209.56383573]\n",
            " [55938.2128086 ]\n",
            " [60235.7284917 ]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(y)\n"
      ],
      "metadata": {
        "id": "7oXQ6m8wfoGX",
        "outputId": "146230a1-4fe4-40ba-9f97-850a45ee27f8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[5.8]\n",
            " [5.4]\n",
            " [5.5]\n",
            " [5.9]\n",
            " [5.6]\n",
            " [5.4]\n",
            " [6.1]\n",
            " [5.7]\n",
            " [6.3]\n",
            " [5.9]\n",
            " [5.9]\n",
            " [7.2]\n",
            " [6. ]\n",
            " [6.8]\n",
            " [6.5]\n",
            " [7.3]\n",
            " [7.4]\n",
            " [7.6]\n",
            " [6.9]\n",
            " [7.3]\n",
            " [7.3]\n",
            " [7. ]\n",
            " [7.1]\n",
            " [7.5]\n",
            " [7.4]\n",
            " [7.6]\n",
            " [6.9]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Exercises:"
      ],
      "metadata": {
        "id": "HSYpesjdEwCn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Make a new code cell below and evaluate 'X'\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "pcR9Ia3VDmWw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(X)"
      ],
      "metadata": {
        "id": "IXY8zYZZgY7I",
        "outputId": "173c3206-fb4a-4b4c-852c-fbc16ff9e569",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[26456.38793813]\n",
            " [27287.08340093]\n",
            " [28384.98778463]\n",
            " [29932.49391006]\n",
            " [31007.76840654]\n",
            " [32181.15453723]\n",
            " [32238.15725928]\n",
            " [35638.42135118]\n",
            " [36215.44759073]\n",
            " [36547.73895598]\n",
            " [36732.03474403]\n",
            " [38341.30757041]\n",
            " [38992.14838075]\n",
            " [41627.12926943]\n",
            " [42025.61737306]\n",
            " [42404.39373816]\n",
            " [45856.62562648]\n",
            " [47260.80045844]\n",
            " [48210.03311134]\n",
            " [48697.83702825]\n",
            " [50683.32350972]\n",
            " [50922.35802345]\n",
            " [51935.60386182]\n",
            " [52279.72885136]\n",
            " [54209.56383573]\n",
            " [55938.2128086 ]\n",
            " [60235.7284917 ]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Make a new code cell below and evaluate 'y'"
      ],
      "metadata": {
        "id": "vDQPFB9AEMMR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(y)"
      ],
      "metadata": {
        "id": "AC6TbzaVga3u",
        "outputId": "914761c3-edf8-48ea-ee76-6bc8c6d43caa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[5.8]\n",
            " [5.4]\n",
            " [5.5]\n",
            " [5.9]\n",
            " [5.6]\n",
            " [5.4]\n",
            " [6.1]\n",
            " [5.7]\n",
            " [6.3]\n",
            " [5.9]\n",
            " [5.9]\n",
            " [7.2]\n",
            " [6. ]\n",
            " [6.8]\n",
            " [6.5]\n",
            " [7.3]\n",
            " [7.4]\n",
            " [7.6]\n",
            " [6.9]\n",
            " [7.3]\n",
            " [7.3]\n",
            " [7. ]\n",
            " [7.1]\n",
            " [7.5]\n",
            " [7.4]\n",
            " [7.6]\n",
            " [6.9]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Let us plot the life satisfaction data and introduce a model"
      ],
      "metadata": {
        "id": "WGVG7gP1EcIx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lifesat.plot(kind='scatter', grid=True,\n",
        "             x=\"GDP per capita (USD)\", y=\"Life satisfaction\")\n",
        "plt.axis([23_500, 62_500, 4, 9])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "uuQq8nUOERM8",
        "outputId": "72b7c9a5-9b4d-488f-f150-51105149ffe4"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAi8AAAG7CAYAAAALy3WMAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABFU0lEQVR4nO3dd3xUVf7/8fcwKRAgBJLQSYFQFGnSNiKhi9jQVVRQxIhd7HXdLxAQVCz8dLGhrhRXwbpW1AUkICgQSuggEJooJqEkIcEQkvP7w80sk4SUyYSZO/N6Ph556D33zJ3PZ85APtx7z7k2Y4wRAACARdTydAAAAABVQfECAAAsheIFAABYCsULAACwFIoXAABgKRQvAADAUiheAACApVC8AAAAS6F4AQAAlkLxAgAALMXripecnBw98MADio6OVp06dXTBBRcoJSXF02EBAAAv4XXFy6233qqFCxfq3Xff1aZNm3TRRRdp8ODBOnjwoKdDAwAAXsDmTQ9mPHHihOrXr6/PP/9cl156qaO9e/fuGjZsmKZMmeLB6AAAgDcI8HQApzt16pQKCwtVu3Ztp/Y6depo+fLlZb4mPz9f+fn5ju2ioiIdOXJE4eHhstlsNRovAABwD2OMcnJy1Lx5c9WqVcGFIeNl4uPjTb9+/czBgwfNqVOnzLvvvmtq1apl2rVrV2b/iRMnGkn88MMPP/zww48P/Bw4cKDCWsGrLhtJ0u7du3XLLbdo2bJlstvtOv/889WuXTutXbtW27ZtK9W/5JmXrKwsRUVFac+ePapfv361YikoKNCSJUs0YMAABQYGVutYVuTP+ftz7hL5+3P+/py75N/5ezr3nJwcxcbG6tixY2rQoEG5fb3qspEktWnTRkuXLlVubq6ys7PVrFkzXXfddWrdunWZ/YODgxUcHFyqvVGjRgoNDa1WLAUFBQoJCVF4eLjffYkl/87fn3OXyN+f8/fn3CX/zt/TuRe/Z2Vu+fC62UbF6tatq2bNmuno0aP67rvvNHz4cE+HBAAAvIDXnXn57rvvZIxR+/bttWvXLj366KPq0KGDEhMTPR0aAADwAl535iUrK0v33HOPOnTooJtuukkXXnihvvvuO787fQcAAMrmdWderr32Wl177bWeDgMAAHgprzvzAgAAUB6KFwAAYCkULwAAwFIoXgAAgKVQvAAAAEuheAEAAJZC8QIAACyF4gUAAFgKxQsAALAUihcAAGApFC8AAMBSKF4AAIClULwAAABLoXgBAACWQvECAAAsheIFAABYCsULAACwFIoXAABgKRQvAADAUiheAACApVC8AAAAS6F4AQAAlkLxAgAALIXiBQAAWArFCwAAsBSKFwAAYCkULwAAwFIoXgAAgKVQvAAAAEuheAEAAJZC8QIAACyF4gUAAFgKxQsAALAUihcAAGApFC8AAMBSKF4AAIClULwAAABLoXgBAACWQvECAAAsheIFAABYCsULAACwFIoXAABgKRQvAADAUiheAACApVC8AAAAS6F4AQAAlkLxAgAALIXiBQAAWArFCwAAsBSKFwAAYCkULwAAwFIoXgAAgKVQvAAAAEuheAEAAJZC8QIAACyF4gUAAFgKxQsAALAUihcAAGApFC8AAMBSKF4AAIClULwAAABLoXgBAACWQvECAAAsxeuKl8LCQo0fP16xsbGqU6eO2rRpo6eeekrGGE+HBgAAvECApwMoadq0aXr99dc1Z84cdezYUWvWrFFiYqIaNGig++67z9PhAQAAD/O64uXHH3/U8OHDdemll0qSYmJiNG/ePK1evdrDkQEAAG/gdcXLBRdcoDfffFM///yz2rVrpw0bNmj58uWaPn16mf3z8/OVn5/v2M7OzpYkFRQUqKCgoFqxFL++usexKn/O359zl8jfn/P359wl/87f07lX5X1txstuJikqKtKTTz6p5557Tna7XYWFhZo6dar+9re/ldk/KSlJkyZNKtX+/vvvKyQkpKbDBQAAbpCXl6dRo0YpKytLoaGh5fb1uuJl/vz5evTRR/X888+rY8eOSk1N1QMPPKDp06drzJgxpfqXdealVatWyszMrDD5ihQUFGjhwoUaMmSIAgMDq3UsK/Ln/P05d4n8/Tl/f85d8u/8PZ17dna2IiIiKlW8eN1lo0cffVRPPPGErr/+eklSp06dtG/fPj3zzDNlFi/BwcEKDg4u1R4YGOi2D9+dx7Iif87fn3OXyN+f8/fn3CX/zt9TuVflPb1uqnReXp5q1XIOy263q6ioyEMRAQAAb+J1Z14uv/xyTZ06VVFRUerYsaPWr1+v6dOn65ZbbvF0aAAAwAt4XfEyY8YMjR8/XnfffbfS09PVvHlz3XHHHZowYYKnQwMAAF7A64qX+vXr66WXXtJLL73k6VAA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4eGl2gEAgH/yyqnS3iI4OFgTJ04sdVnKX/hz/v6cu0T+/py/P+cu+Xf+Vsrdq27YBQAAqAhnXgAAgKVQvAAAAEuheAEAAJZC8QIAACzFp4qXZ555Rj179lT9+vXVuHFjXXnlldqxY4dTn/79+8tmszn93HnnnU599u/fr0svvVQhISFq3LixHn30UZ06dcqpT3Jyss4//3wFBwcrLi5Os2fPLhXPq6++qpiYGNWuXVu9e/fW6tWr3Z7z6V5//XV17tzZscBQfHy8vvnmG8f+P/74Q/fcc4/Cw8NVr149XX311fr999+djmHV3KWK8/flsS/p2Weflc1m0wMPPOBo8/XxL1ZW7r489klJSaVy69Chg2O/r497Rfn78thL0sGDB3XjjTcqPDxcderUUadOnbRmzRrHfmOMJkyYoGbNmqlOnToaPHiwdu7c6XSMI0eO6IYbblBoaKjCwsI0duxYHT9+3KnPxo0b1bdvX9WuXVutWrXSc889VyqWjz76SB06dFDt2rXVqVMnLViwoGaS/m9iPmPo0KFm1qxZZvPmzSY1NdVccsklJioqyhw/ftzRp1+/fua2224zv/32m+MnKyvLsf/UqVPmvPPOM4MHDzbr1683CxYsMBEREeZvf/ubo09aWpoJCQkxDz30kNm6dauZMWOGsdvt5ttvv3X0mT9/vgkKCjLvvPOO2bJli7nttttMWFiY+f3332ss/y+++MJ8/fXX5ueffzY7duwwTz75pAkMDDSbN282xhhz5513mlatWpnFixebNWvWmL/85S/mggsu8IncK5O/L4/96VavXm1iYmJM586dzf333+9o9/XxLy93Xx77iRMnmo4dOzrllpGR4djv6+NeUf6+PPZHjhwx0dHR5uabbzarVq0yaWlp5rvvvjO7du1y9Hn22WdNgwYNzGeffWY2bNhgrrjiChMbG2tOnDjh6HPxxRebLl26mJUrV5offvjBxMXFmZEjRzr2Z2VlmSZNmpgbbrjBbN682cybN8/UqVPHzJw509FnxYoVxm63m+eee85s3brV/N///Z8JDAw0mzZtqpHcfap4KSk9Pd1IMkuXLnW09evXz+kvtZIWLFhgatWqZQ4dOuRoe/31101oaKjJz883xhjz2GOPmY4dOzq97rrrrjNDhw51bPfq1cvcc889ju3CwkLTvHlz88wzz1Q3rSpp2LCh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kaN9w4YNJigoyERGRpq8vDxHe8kzL8ZUfNno999/d4qx2Jw5c4wkM2XKlHLzL/b1118bSebvf/97mftdPfPy0EMPGUkmNjbWTJs2zfz4448mNze33OO4+n0tlpWVZSSZhISEco8BuBPFC1DCOeecYySZbdu2ldq3ZMkSM3HiRKefkpdKKvPLYNu2bUaSOeeccxxtxb8427Rp4zj2I488Yvr27Wskmdq1a5sff/yxwviLi5fBgweX2peTk2PCwsJMaGio43LFp59+aiSZyZMnl3m8v/71r6ZWrVomKyvLKcegoCCTkZFRYTzFCgoKTP369U2DBg2cLg9V1SeffGIkmdmzZzu1SzJ2u73My1xjx441kszHH3/saHOleDmToqIiExoaavr371+p/jNnzjSSzD/+8Y8y97tavJw4ccLcfPPNplatWo5izm63m/PPP9889dRTpe53Mcb17+vpateubVq3bl3uMQB3qtr5bsDPJScna9KkSaXa+/fv77b32L17t+M9AgMD1aRJE40aNUpPPPGEOnXqVOnj9O3bt1RbvXr11LVrVyUnJystLU1xcXFauXKlpD/X7UhKSir1mkOHDqmoqEg///yzevTo4WiPjY1VREREpePZvn27cnJyNHjwYDVs2LDC/jk5OXrhhRf02Wefaffu3aWm+JZ1aSQqKkrR0dGl2vv27at//vOfWr9+va6++upKx1yWTz/9VDNnztS6det09OhRFRYWlhtTWQ4fPixJCgsLq1YsJdWuXVuzZs3SU089pQULFmj16tVavXq11q1bp3Xr1mnmzJlaunSpWrdu7db3bdSokTIzM916TKA8FC9ACU2aNNG2bdv066+/qkOHDk77kpKSHL/g58+fr5EjR7r0HsW/5Mq6p2bo0KH69ttvXTru6Zo0aVJue/H9GUeOHJEkvffee+Uer2TxcKbjn0nx+50+rfxMTp48qf79+2vdunXq1q2bRo8erfDwcAUEBGjv3r2aM2eO8vPzS72usjm76sUXX9QjjzyiyMhIXXTRRWrZsqXq1KkjSXrppZfKjKksxa/5448/ytxffB9MUVHRGe+JKSoqOuM9UC1bttTtt9/uWPxu9+7duuWWW7Rs2TI9+OCD+vzzzysVZ7Hyvq/Sn/cyFU83B84GiheghAsuuEDJyclasmSJBg4cWCPvUbyqa8+ePWvk+JL0+++/l9veoEEDSXLcZPvll1/qsssuq/Txq3LzsPS/swwHDx6ssO/nn3+udevWaezYsXr77bed9s2fP19z5swp83WVzdkVp06d0lNPPaVmzZopNTVVjRs3duwzxui5556r9LGKi4DiwrGk4jgPHz5cZsFgjNGRI0cqnU+bNm00e/ZstW7dWt9//32l4yxW3ve1qKhIWVlZ6tixY5WPC7iK2UZACWPGjFGtWrX05ptv1sip8IyMDM2cOVOSdP3117v9+MV++OGHUm3Hjx9XamqqQkNDHZcOevfuLUn66aefaiwW6c8VWUNDQ5WSklJqtlNJu3fvliQNHz681L6y8iq2f/9+pxlLJV/TrVu3ct/XbrdLktOloGKZmZnKyspSfHy8U+EiSWvWrNGJEyfKPfbpii//7dixo9z9ZxqTjRs3Kjc3V507d670e9arV6/SfU9X0fd1586dKioqqtIlTaC6KF6AEtq1a6fHHntM6enpGjZsmHbt2lVmv2PHjlX52Fu2bNFFF12k9PR0jRkzxukeEndbtGiRvvvuO6e2qVOn6tixY7rpppsclyOGDx+uqKgoTZ8+XcuWLSt1nIKCAi1fvrza8QQEBOiOO+5QVlaW7r///lIFQlZWlo4fPy5JjvtWSr7v0qVL9dZbb53xPQoLC/Xkk086rTq7ceNGvfvuu4qMjNQll1xSbowNGzaUzWbTgQMHSu1r3Lix6tSpo3Xr1ikvL8/RfvToUd17773lHrekTp06qVGjRlq1alWZ+8eMGSNJmjBhQqnvWX5+vh577DFJ0k033eS0b/LkyWXGbozRs88+K0m68MILKx1nZb6vxTn069ev0scFqovLRkAZpk6dqpMnT2r69Onq0KGDEhIS1KVLF4WEhCg9PV0bN27U6tWrHTfAlpSZmem4N+bUqVM6fPiw1q1bp9WrV0uSbr31Vr366qs1msNll12myy+/XNdcc41iYmK0cuVKLVmyRG3atNHkyZMd/YKDg/Xxxx9r2LBh6tevnwYOHKhOnTrJZrNp3759+uGHHxQeHq7t27dXO6bJkydr5cqVevfdd7Vy5UoNGzZMwcHBSktL07fffqvly5era9euuvzyyxUTE6PnnntOmzdv1nnnnacdO3boq6++0lVXXaWPP/64zON37txZy5cvV8+ePTV48GBlZGTogw8+0KlTp/Tmm2867jU5k3r16qlnz55atmyZRo8erbZt26pWrVoaPXq0oqOjdffdd+vFF19Uly5ddPnllys7O1vffPONoqOj1bx580p/DjabTcOHD9fs2bP1yy+/qGXLlk77Bw0apPvvv18vv/yy2rVrpyuuuEJNmzbV4cOHtWDBAu3fv19XXXWVEhMTnV43ffp0JSUlqUePHurevbsaNWqkw4cPa8mSJfr5558VHh6uF198sVQ81fm+Lly4UAEBAVW65AhUm2cnOwHebd26deb22283HTp0MPXq1TOBgYGmSZMmZuDAgeb5558vc1VVlVidNTg42DRu3Nj06dPHPPLII2bDhg1lvld567xUxZlW2A0PDzc333yz+e2338p83S+//GLuv/9+07ZtWxMcHGxCQ0PNOeecY2699dZSa96oGo8q+OOPP8wLL7xgunbtaurUqWPq1atnzj33XPPwww87TeVNS0szV199tYmMjDQhISGmZ8+eZv78+WbJkiVGkpk4cWKZMR04cMBcd911plGjRqZ27domPj7e/Oc//ykVR1lTpY35c4XlSy65xISFhRmbzebU5+TJk2bq1KmOzygqKso8/PDDJicnx0RHR5vo6OhKfw6rVq0yksy0adPO2OeTTz4xQ4cONRERESYgIMCEhYWZhIQE8/bbb5e5Mu+yZcvME088YeLj403z5s1NYGCgqVevnuncubN55JFHzK+//lrqNa5+X40xJjc319SrV89ceeWVlc4bcAcezAj4mNmzZysxMVGzZs06a09H9gY2m039+vVz3FxqBX379lVGRoa2bt3q1pV2z5a3335bt912m5YuXaqEhARPhwM/Yr0/LQDgI55//nnt2LFD8+fP93QoVXbq1Ck9/fTTuuKKKyhccNZxzwsAeMhf/vIXzZw5s8zZTd5u//79uummmzR69GhPhwI/RPECAB5UvJCc1bRu3brMFZmBs4F7XgAAgKVwzwsAALAUihcAAGApFC8AAMBSKF4AAIClULwAAABLoXgBAACWQvECAAAsheIFAABYCsULAACwlP8P7S9ItBkYeAoAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Excercise(s):"
      ],
      "metadata": {
        "id": "JIXI1IL6JvVm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Define various 't0' and 't1' (thetas) and observe how it affects our model"
      ],
      "metadata": {
        "id": "EA7d6lEBJ4OK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "t0, t1 = 3.75, 6.78e-05\n",
        "\n",
        "from sklearn import linear_model\n",
        "min_gdp = 23_500\n",
        "max_gdp = 62_500\n",
        "min_life_sat = 4\n",
        "max_life_sat = 9\n",
        "\n",
        "lifesat.plot(kind='scatter', figsize=(5, 3), grid=True,\n",
        "                   x=\"GDP per capita (USD)\", y=\"Life satisfaction\")\n",
        "\n",
        "X = np.linspace(min_gdp, max_gdp, 1000)\n",
        "plt.plot(X, t0 + t1 * X, \"b\")\n",
        "\n",
        "plt.text(max_gdp - 20_000, min_life_sat + 1.9,\n",
        "         fr\"$\\theta_0 = {t0:.2f}$\", color=\"b\")\n",
        "plt.text(max_gdp - 20_000, min_life_sat + 1.3,\n",
        "         fr\"$\\theta_1 = {t1 * 1e5:.2f} \\times 10^{{-5}}$\", color=\"b\")\n",
        "\n",
        "plt.axis([min_gdp, max_gdp, min_life_sat, max_life_sat])\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        },
        "id": "HXN6ixwFIzii",
        "outputId": "cacd2fb3-6b76-4e8c-be8a-3fa4f77c10b0"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Define new values for t0 and t1\n",
        "theta_values = [\n",
        "    (3.5, 7e-05),  # Lavere intercept, højere slope\n",
        "    (4.0, 5e-05),  # Højere intercept, lavere slope\n",
        "    (3.75, 6.78e-05)  # Originale værdier\n",
        "]\n",
        "\n",
        "# Fixed parameters for the plot\n",
        "min_gdp = 23_500\n",
        "max_gdp = 62_500\n",
        "min_life_sat = 4\n",
        "max_life_sat = 9\n",
        "\n",
        "# Plot GDP vs. Life Satisfaction\n",
        "for t0, t1 in theta_values:\n",
        "    plt.figure(figsize=(5, 3))\n",
        "    plt.grid(True)\n",
        "    plt.scatter(lifesat[\"GDP per capita (USD)\"], lifesat[\"Life satisfaction\"], label=\"Data\")\n",
        "    X = np.linspace(min_gdp, max_gdp, 1000)\n",
        "    plt.plot(X, t0 + t1 * X, \"b\", label=f\"$\\\\theta_0={t0:.2f}, \\\\theta_1={t1:.2e}$\")\n",
        "    plt.legend()\n",
        "    plt.axis([min_gdp, max_gdp, min_life_sat, max_life_sat])\n",
        "    plt.title(\"Effect of different theta values on the model\")\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "8o-6i-V5hUgk",
        "outputId": "bf6a1d94-8c58-49b9-bb20-91ecab314f11",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 911
        }
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x300 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Establish the model"
      ],
      "metadata": {
        "id": "J0iRLACuXH79"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import linear_model\n",
        "\n",
        "X_features = lifesat[[\"GDP per capita (USD)\"]]\n",
        "y_labels = lifesat[[\"Life satisfaction\"]]\n",
        "\n",
        "lin1 = linear_model.LinearRegression()\n",
        "lin1.fit(X_features, y_labels)\n",
        "\n",
        "t0, t1 = lin1.intercept_[0], lin1.coef_[0][0]\n",
        "print(f\"θ0={t0:.2f}, θ1={t1:.2e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BylN6risXh1C",
        "outputId": "bfefa7fd-ef26-4a28-b303-fba053b6da87"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "θ0=3.75, θ1=6.78e-05\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_pred = 40000\n",
        "y_pred = lin1.predict([[X_pred]])[0,0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i7nan8QdT8ZO",
        "outputId": "c025aa7f-ded0-46d2-9255-de71202cc94a"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xgXDykJWUgcU",
        "outputId": "9bce7ad5-66e3-4916-a20c-66d28583c1bf"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6.4606093051133975"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "KRCZu6w0Ub-Q"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "FiR8qLxZUSQ7"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import linear_model\n",
        "min_gdp = 23_500\n",
        "max_gdp = 62_500\n",
        "min_life_sat = 4\n",
        "max_life_sat = 9\n",
        "\n",
        "lifesat.plot(kind='scatter', figsize=(5, 3), grid=True,\n",
        "                   x=\"GDP per capita (USD)\", y=\"Life satisfaction\")\n",
        "\n",
        "X = np.linspace(min_gdp, max_gdp, 1000)\n",
        "plt.plot(X, t0 + t1 * X, \"b\")\n",
        "\n",
        "plt.text(max_gdp - 20_000, min_life_sat + 1.9,\n",
        "         fr\"$\\theta_0 = {t0:.2f}$\", color=\"b\")\n",
        "plt.text(max_gdp - 20_000, min_life_sat + 1.3,\n",
        "         fr\"$\\theta_1 = {t1 * 1e5:.2f} \\times 10^{{-5}}$\", color=\"b\")\n",
        "\n",
        "plt.axis([min_gdp, max_gdp, min_life_sat, max_life_sat])\n",
        "\n",
        "plt.plot([X_pred, X_pred],\n",
        "         [min_life_sat, y_pred], \"r--\")\n",
        "plt.plot(X_pred, y_pred, \"ro\")\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        },
        "id": "J2vqshOxZMXt",
        "outputId": "f0ae13dc-2aa0-4eb6-cd82-f75e9811ccbe"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Excercise(s):\n"
      ],
      "metadata": {
        "id": "mrttlJ7yPI7m"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Try with another dataset https://raw.githubusercontent.com/jpandersen61/Machine-Learning/main/InjuredandkilledintrafikDK.csv"
      ],
      "metadata": {
        "id": "rvGBeixgPRTH"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "O4NPUCygPYr3"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Questions"
      ],
      "metadata": {
        "id": "xpgWXfOyA23y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. How would you define Machine Learning?\n"
      ],
      "metadata": {
        "id": "rOIfHyJcA8C8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Machine Learning (ML) is a subset of artificial intelligence (AI) that involves teaching computers to learn patterns, relationships, and rules from data, without being explicitly programmed for specific tasks. Instead of relying on pre-defined rules, ML systems use algorithms and statistical models to improve their performance over time based on the input data they process."
      ],
      "metadata": {
        "id": "Ex4dqtgZhbfJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\\2. Can you name four types of problems where it shines?\n",
        "\n"
      ],
      "metadata": {
        "id": "wMA1G2PPBwpU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write your answer here"
      ],
      "metadata": {
        "id": "QAcDslfMBtVj"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rVM0k_pciQaX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. What is a labeled training set?"
      ],
      "metadata": {
        "id": "i0M6EMx8B71g"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write your answer here"
      ],
      "metadata": {
        "id": "fipL2K_FBtin"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. What are the two most common supervised tasks?"
      ],
      "metadata": {
        "id": "43FAK9O-CE8K"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write your answer here"
      ],
      "metadata": {
        "id": "JjakH8_HBtmV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. Can you name four common unsupervised tasks?"
      ],
      "metadata": {
        "id": "6_5YsjSzCJes"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write your answer here"
      ],
      "metadata": {
        "id": "aPFI1nvxBtp4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. What type of Machine Learning algorithm would you use to allow\n",
        "a robot to walk in various unknown terrains?\n"
      ],
      "metadata": {
        "id": "DwIRcR9YCNb5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write your answer here"
      ],
      "metadata": {
        "id": "E8SE6UvrBtuJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. What type of algorithm would you use to segment your customers\n",
        "into multiple groups?"
      ],
      "metadata": {
        "id": "ZflRQBbbCRwX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write your answer here"
      ],
      "metadata": {
        "id": "7QcbHPkBBtwI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. Would you frame the problem of spam detection as a supervised\n",
        "learning problem or an unsupervised learning problem?"
      ],
      "metadata": {
        "id": "X0fKgGXsLq6o"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write your answer here"
      ],
      "metadata": {
        "id": "nLnPVahlBty_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "9. What is an online learning system?\n"
      ],
      "metadata": {
        "id": "n7CHmnsdCeY3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write your answer here"
      ],
      "metadata": {
        "id": "0YRkRS_7Bt2I"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. What is out-of-core learning?"
      ],
      "metadata": {
        "id": "UKkgQ_veCsN_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write your answer here"
      ],
      "metadata": {
        "id": "0raVrt27Bt5U"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "11. What type of learning algorithm relies on a similarity measure to\n",
        "make predictions?"
      ],
      "metadata": {
        "id": "alMcqdhaCt8m"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write your answer here"
      ],
      "metadata": {
        "id": "NzHnn7Q5Bt8C"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "12. What is the difference between a model parameter and a learning\n",
        "algorithm’s hyperparameter?"
      ],
      "metadata": {
        "id": "lpvdcsj2CznS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write your answer here"
      ],
      "metadata": {
        "id": "22JFh-dABt_J"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "13. What do model-based learning algorithms search for? What is the\n",
        "most common strategy they use to succeed? How do they make\n",
        "predictions?"
      ],
      "metadata": {
        "id": "fwVjj-WkC4U5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write your answer here"
      ],
      "metadata": {
        "id": "c8Q85u6RBuCH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "14. Can you name four of the main challenges in Machine Learning?"
      ],
      "metadata": {
        "id": "wkKbPfjODAj-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Write your answer here"
      ],
      "metadata": {
        "id": "HznUcxBmBuFH"
      }
    }
  ]
}